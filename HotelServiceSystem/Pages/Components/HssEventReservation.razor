@using HotelServiceSystem.Entities
@using System.Text
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.ViewModel
@inject IEventReservationService eventReservationService
@inject NavigationManager navigationManager

<h3>HssEventReservation</h3>
<div class="col-12">
    <hr/>
        <div class="col-12">
            <MudExpansionPanel Text="Add event reservation">
                <HssEventReservationInput EventViewModel="@SetNewEventReservation()" OnSubmit="@OnEventReservationAdd"/>
            </MudExpansionPanel>
        </div>
        <br/>
    <br/>
    <div class="col-10">
        <h3>Reservations</h3>
        <br/>
        <table class="table">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Room list</th>
                <th>Date from</th>
                <th>Date to</th>
                <th>Price</th>
                <th>Date of submission</th>
                <th>Number of guests</th>
                <td>Description</td>
            </tr>
            </thead>
            <tbody>
            @if (EventReservationList != null)
            {
                if (EventReservationList.Count > 0)
                {
                    foreach (var reservation in EventReservationList)
                    {
                        <tr>
                            <td>@reservation.Id</td>
                            <td>@GetFirstNameLastName(reservation.Client)</td>
                            <td>@GetReservedRoomsList(reservation.RoomReservations)</td> 
                            <td>@reservation.DateFrom</td>
                            <td>@reservation.DateTo</td>
                            <td>@reservation.Price</td>
                            <td>@reservation.DateOfSubmission</td>
                            <td>@reservation.NumberOfGuests</td>
                            <td>@reservation.Description</td>
                            <td><MatButton Type="Button" OnClick="@(() => ShowDetails(reservation.Id))">Details</MatButton></td>
                        </tr>
                    }
                }
            }
            else
            {
                <h3>..Loading</h3>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<EventReservation> EventReservationList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EventReservationList = eventReservationService.GetAllEvents();
        await base.OnInitializedAsync();
    }

    private async Task OnEventReservationAdd(EventReservationViewModel eventReservation)
    {
        var parsedModel = eventReservation.ToEventReservation();
        await eventReservationService.AddEventAsync(parsedModel);
        EventReservationList.Add(parsedModel);
    }
    
    private string GetReservedRoomsList(ICollection<RoomReservation> roomReservations)
    {
        var builder = new StringBuilder();
        const string separator = " ";
        for(var i = 0; i < roomReservations.Count; i++)
        {
            var roomReservation = roomReservations.ElementAt(i);

            if (roomReservation.Room != null)
            {
                builder.Append(roomReservation.Room.RoomIdentifier);
                if (i < roomReservations.Count - 1)
                {
                    builder.Append(separator);
                }
            }
        }

        return builder.ToString();
    }

    private void ShowDetails(int id)
    {
        navigationManager.NavigateTo($"eventReservationDetails/{id}");
    }
    
    private string GetFirstNameLastName(Client client)
    {
        return client == null ? string.Empty : $"{client.FirstName} {client.LastName}";
    }
    
    private EventReservationViewModel SetNewEventReservation()
    {
        return new EventReservationViewModel()
        {
            NumberOfGuests = 1,
            Client = new Client()
            {
                Id = 0
            }
        };
    }
}