@page "/eventReservations"
@using HotelServiceSystem.Entities
@using System.Text
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.ViewModel
@inject IEventReservationService eventReservationService
@inject NavigationManager navigationManager

<MudGrid>
    <MudItem xs="12">
        <MudCard Elevation="25">
            <MudExpansionPanel HideIcon="@true">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Rounded.Add" class="mr3"/>
                        <MudText> Add reservation</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <HssEventReservationInput EventViewModel="@SetNewEventReservation()" OnSubmit="OnEventReservationAdd"/>
                </ChildContent>
            </MudExpansionPanel>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard Elevation="25">
            <HssEventReservationTable EventReservationsList="@EventReservationList"/>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<EventReservation> EventReservationList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EventReservationList = eventReservationService.GetAllEvents();
        await base.OnInitializedAsync();
    }

    private async Task OnEventReservationAdd(EventReservationViewModel eventReservation)
    {
        var parsedModel = eventReservation.ToEventReservation();
        await eventReservationService.AddEventAsync(parsedModel);
        EventReservationList.Add(parsedModel);
    }
    
    private string GetReservedRoomsList(ICollection<RoomReservation> roomReservations)
    {
        var builder = new StringBuilder();
        const string separator = " ";
        for(var i = 0; i < roomReservations.Count; i++)
        {
            var roomReservation = roomReservations.ElementAt(i);

            if (roomReservation.Room != null)
            {
                builder.Append(roomReservation.Room.RoomIdentifier);
                if (i < roomReservations.Count - 1)
                {
                    builder.Append(separator);
                }
            }
        }

        return builder.ToString();
    }

    private void ShowDetails(int id)
    {
        navigationManager.NavigateTo($"eventReservationDetails/{id}");
    }
    
    private string GetFirstNameLastName(Client client)
    {
        return client == null ? string.Empty : $"{client.FirstName} {client.LastName}";
    }
    
    private EventReservationViewModel SetNewEventReservation()
    {
        return new EventReservationViewModel()
        {
            NumberOfGuests = 1,
            Client = new Client()
            {
                Id = 0
            }
        };
    }
}