@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using System.Globalization
@using HotelServiceSystem.Core.Validations
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.ViewModel
@inject IHotelReservationService hotelReservationService
@inject IClientService clientService
@inject IRoomService roomService
@inject IRoomHelper _roomHelper
@inject IAdditionalServiceService additionalServiceService
@inject IServiceProvider _serviceProvider;

<EditForm Model="@ReservationViewModel" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <MudGrid>
        <MudItem xs="12">
            <HssClientAutoselect ClientModel="@ReservationViewModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField Label="Number of guests" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Person" @bind-Value="@ReservationViewModel.NumberOfGuests"/>
            <ValidationMessage For="@(() => ReservationViewModel.NumberOfGuests)"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <HssTimespanPicker ReservationModel="ReservationViewModel" OnDatesSelected="FillAvailableRoomsList"/>
        </MudItem>
        <MudItem xl="12">
            <HSSRoomMultiSelector @bind-NotSelected="@RoomList" NotSelectedLabel="Available Rooms" @bind-Selected="@ReservationViewModel.SelectedRooms" SelectedLabel="Selected Rooms" OnRoomsChanged="@CalculatePrice"/>
            <ValidationMessage For="@(() => ReservationViewModel.SelectedRooms)"/>
        </MudItem>
        <MudItem xs="12">
            <HssAdditionalServiceSelect AdditionalServiceList="@_additionalServiceList" @bind-SelectedAdditionalServices="@ReservationViewModel.SelectedAdditionalServices"/>
        </MudItem>
        <MudItem xs="12">
             <MudTextField Label="Discount" @bind-Value="@ReservationViewModel.Discount"/>
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Price" ReadOnly="@true" @bind-Value="@Price" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Money"/>
        </MudItem>
        @if (HasReset)
        {
            <MudItem xs="6" sm="1">
                <MudButton EndIcon="@Icons.Material.Rounded.Replay" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Reset">Reset</MudButton>
            </MudItem>
        }
        <MudItem xs="6" sm="1">
            <MudButton EndIcon="@Icons.Material.Rounded.Check" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Submit">Submit</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public bool IsUpdate { get; set; }
    
    [Parameter]
    public HotelReservationViewModel ReservationViewModel { get; set; }
    
    [Parameter]
    public EventCallback<HotelReservationViewModel> OnSubmit { get; set; }

    [Parameter]
    public bool HasReset { get; set; } = true;
    
    private bool EnableClientAdd { get; set; }
    private List<Room> RoomList { get; set; }
    private List<Client> ClientList { get; set; }
    private List<AdditionalService> _additionalServiceList = new List<AdditionalService>();
    private int NumberOfDays { get; set; }
    private static DateTime _today = DateTime.Now.Date;
    private double _price;

    private string Price
    {
        get
        {
            CalculatePrice();
            return _price.ToString(CultureInfo.InvariantCulture);
        }
        set
        {
            CalculatePrice();
            _price = double.Parse(value);
        } 
    }

    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        ClientList = clientService.GetAllClients();
        _additionalServiceList = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Reservation);

        if (ReservationViewModel.DateRange != null)
        {
            var arrival = ReservationViewModel.DateRange.Start;
            var departure = ReservationViewModel.DateRange.End;
            
            if (arrival != null && departure != null)
            {
                await FillAvailableRoomsList(new ReservationSpan(arrival.Value, departure.Value));
            }
        }
        else
        {
            ReservationViewModel.DateRange = new DateRange(_today.Date, _today.Date.AddDays(2));
        }

        GetPreselectedRooms(ReservationViewModel.SelectedRooms);
        await base.OnInitializedAsync();
    }

    private void GetPreselectedRooms(ICollection<Room> selectedRooms)
    {
        if (selectedRooms == null || selectedRooms.Count <= 0)
        {
            return;
        }
        
        RoomList.RemoveAll(x => selectedRooms.Any(y => y.Equals(x)));
    }
    
    private async Task Submit()
    {;
        ReservationViewModel.Price = _price;
        ReservationViewModel.DateOfSubmission = DateTime.Today.ToLocalTime();
        
        if (!IsUpdate)
        {
            RoomList = new List<Room>();
        }
        
        await OnSubmit.InvokeAsync(ReservationViewModel);
    }

    private async Task FillAvailableRoomsList(ReservationSpan reservationSpan)
    {
        RoomList = await roomService.GetAvailableRooms(reservationSpan);
        RoomList = RoomList.Where(x => _roomHelper.IsFree(x, reservationSpan)).ToList();
        NumberOfDays = reservationSpan.GetAmountOfDays();
    }

    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
    }

    private void SetClient(Client client)
    {
        ReservationViewModel.Client = client;
    }

    private void CalculatePrice()
    {
        _price = 0d;

        var selectedRooms = ReservationViewModel.SelectedRooms;
        if (selectedRooms != null && selectedRooms.Count > 0)
        {
            _price += selectedRooms.Sum(room => room.Price);
        }

        var selectedAdditionalService = ReservationViewModel.SelectedAdditionalServices;
        if (selectedAdditionalService != null && selectedAdditionalService.Count > 0)
        {
            _price += selectedAdditionalService.Sum(x => x.Price);
        }

        _price *= NumberOfDays;
    }
}