@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using HotelServiceSystem.Core.Helpers
@using System.Collections
@using System.ComponentModel
@using System.Reflection.Emit
@using Microsoft.Extensions.Logging
@using TimeSpan = HotelServiceSystem.Core.TimeSpan
@inject IHotelReservationService hotelReservationService
@inject IClientService clientService
@inject IRoomService roomService

<EditForm Model="@ReservationModel" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <HssClientAutoselect ClientModel="@ReservationModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
    <br/>
    <HssInputCustom Caption="Number of guests" @bind-Value="ReservationModel.NumberOfGuests"/>
    <div class="col-12 row">
        <HssDatePicker Label="Arrival" OnValueChanged="@SetDateFrom" ValidationFor="@(() => ReservationModel.DateFrom)"/>
        <HssDatePicker Label="Departure" OnValueChanged="@SetDateTo" ValidationFor="@(() => ReservationModel.DateTo)" MinimalDate="@GetMinimalDepartureDate()"/>
    </div>
    <br/>
    <div class="form-group">
        <HSSRoomMultiSelector NotSelected="@RoomList" NotSelectedLabel="Available Rooms" Selected="@SelectedRoomList" SelectedLabel="Selected Rooms"/>
    </div>
    <ValidationMessage For="@(() => ReservationModel.RoomReservations)"></ValidationMessage>
    <HssInputCustom Caption="Price" @bind-Value="ReservationModel.Price"/>
    <HssInputCustom Caption="Discount" @bind-Value="ReservationModel.Discount"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-2 btn btn-primary" value="Submit"/>
    </div>
</EditForm>

@code {
    [Parameter]
    public HotelReservation ReservationModel { get; set; }
    
    private bool EnableClientAdd { get; set; }
    
    private Client _selectedClient
    {
        get
        {
            if (ReservationModel.Client == null)
            {
                ReservationModel.Client = new Client()
                {
                    CompanyName = "",
                    Email = "",
                    FirstName = "",
                    LastName = "",
                    PhoneNumber = "",
                    Id = 0
                };
            }

            return ReservationModel.Client;

        }
        set => ReservationModel.Client = value;
    }

    [Parameter]
    public EventCallback<HotelReservation> OnSubmit { get; set; }

    private List<Room> RoomList { get; set; }
    private List<Room> SelectedRoomList { get; set; }
    private List<Client> ClientList { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        SelectedRoomList = new List<Room>();
        ClientList = clientService.GetAllClients();

        var roomReservations = ReservationModel.RoomReservations;
        if (roomReservations != null && roomReservations.Count > 0)
        {
            foreach (var roomReservation in roomReservations)
            {
                var room = roomReservation.Room;
                if (room != null)
                {
                    SelectedRoomList.Add(room);
                }
                
            }
            RoomList.RemoveAll(x => SelectedRoomList.Any(y => y.Equals(x)));
        }
        
        await base.OnInitializedAsync();
    }
    

    private async Task Submit()
    {
        ReservationModel.RoomReservations.Clear();
        SelectedRoomList.ForEach( x=> ReservationModel.RoomReservations.Add(new RoomReservation
        {
            Reservation = ReservationModel,
            Room = x
        }));
        
        await OnSubmit.InvokeAsync(ReservationModel);
    }
    
    private async Task<IEnumerable<Client>> ClientSearch(string searchClient)
    {
        if (string.IsNullOrEmpty(searchClient))
        {
            return await Task.FromResult(ClientList);
        }
        
        var search = searchClient.ToLower();
        return await Task.FromResult(ClientList.Where(x => x.FirstName.ToLower().Contains(search) ||
                                                            x.LastName.ToLower().Contains(search) ||
                                                            x.PhoneNumber.ToLower().Contains(search)).ToList());
    }

    private void FillAvailableRoomsList()
    {
        if (ReservationModel.DateFrom != default && ReservationModel.DateTo != default)
        {
            var timeSpan = new TimeSpan(ReservationModel.DateFrom, ReservationModel.DateTo);
            RoomList = roomService.GetAvailableRooms(timeSpan);
        }
    }

    private void SetDateFrom(DateTime dateTime)
    {
        ReservationModel.DateFrom = dateTime.ToLocalTime();
        FillAvailableRoomsList();
    }
    
    private void SetDateTo(DateTime dateTime)
    {
        ReservationModel.DateTo = dateTime.ToLocalTime();
        FillAvailableRoomsList();
    }

    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
    }

    private void SetClient(Client client)
    {
        ReservationModel.Client = client;
    }

    private async Task DisableClientAdd(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
        ReservationModel.Client = client;
        EnableClientAdd = false;
    }

    private DateTime GetMinimalDepartureDate()
    {
        return ReservationModel.DateFrom != default ? ReservationModel.DateFrom : DateTime.Now.ToLocalTime().AddDays(-1);
    }

}