@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using System.Globalization
@using HotelServiceSystem.Core.Validations
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.ViewModel
@inject IHotelReservationService hotelReservationService
@inject IClientService clientService
@inject IRoomService roomService
@inject IAdditionalServiceService additionalServiceService
@inject IAdditionalServiceHelper additionalServiceHelper
@inject IServiceProvider _serviceProvider;

<EditForm Model="@ReservationViewModel" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <HssClientAutoselect ClientModel="@ReservationViewModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
    <br/>
    <HssInputCustom Caption="Number of guests" @bind-Value="ReservationViewModel.NumberOfGuests" ValidationFor="@(() => ReservationViewModel.NumberOfGuests)"/>
    <HssTimespanPicker ReservationModel="@ReservationViewModel" OnDatesSelected="@FillAvailableRoomsList"/>
    <br/>
    <div class="form-group">
        <HSSRoomMultiSelector @bind-NotSelected="@RoomList" NotSelectedLabel="Available Rooms" @bind-Selected="@ReservationViewModel.SelectedRooms" SelectedLabel="Selected Rooms" OnRoomsChanged="@CalculatePrice"/>
    </div>
    <ValidationMessage For="@(() => ReservationViewModel.SelectedRooms)"/>
    <HssAdditionalServiceSelect AdditionalServiceList="@_additionalServiceList" @bind-SelectedAdditionalServices="@ReservationViewModel.SelectedAdditionalServices"/>
    <HssInputCustom Caption="Price" @bind-Value="@Price" ReadOnly="@true"/>
    <HssInputCustom Caption="Discount" @bind-Value="ReservationViewModel.Discount"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success" Class="form-control col-2 btn btn-primary">Submit</MudButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public HotelReservation ReservationModel { get; set; }
    
    [Parameter]
    public HotelReservationViewModel ReservationViewModel { get; set; }
    
    [Parameter]
    public EventCallback<HotelReservationViewModel> OnSubmit { get; set; }
    
    private bool EnableClientAdd { get; set; }
    private List<Room> RoomList { get; set; }
    private List<Room> SelectedRoomList { get; set; }
    private List<Client> ClientList { get; set; }
    private List<AdditionalService> _additionalServiceList = new List<AdditionalService>();
    private List<AdditionalService> _selectedAdditionalService = new List<AdditionalService>();
    private double _price;

    private string Price
    {
        get
        {
            CalculatePrice();
            return _price.ToString(CultureInfo.InvariantCulture);
        }
        set
        {
            CalculatePrice();
            _price = double.Parse(value);
        } 
    }

    private Client SelectedClient
    {
        get => ReservationViewModel.Client ?? (ReservationViewModel.Client = Client.Default);
        set => ReservationViewModel.Client = value;
    }

    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        SelectedRoomList = new List<Room>();

        ClientList = clientService.GetAllClients();
        _additionalServiceList = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Reservation);
        
        //GetPreselectedRooms(ReservationViewModel.RoomReservations);
        //GetPreselectedAdditionalServices(ReservationViewModel.SelectedAdditionalServices);

        await base.OnInitializedAsync();
    }

    private void GetPreselectedAdditionalServices(ICollection<AdditionalServiceReservation> additionalServiceReservations)
    {

    }

    private void GetPreselectedRooms(ICollection<RoomReservation> roomReservations)
    {
        if (roomReservations == null || roomReservations.Count <= 0)
        {
            return;
        }
            
        foreach (var roomReservation in roomReservations)
        {
            var room = roomReservation.Room;
            if (room != null)
            {
                SelectedRoomList.Add(room);
            }
        }

        RoomList.RemoveAll(x => SelectedRoomList.Any(y => y.Equals(x)));
    }
    
    private async Task Submit()
    {
        //ReservationModel.RoomReservations.Clear();
        //ReservationModel.DateOfSubmission = DateTime.Today.ToLocalTime();
        //ParseSelectedRooms();
        //ParseAdditionalServices();
        ReservationViewModel.Price = _price;
        SelectedRoomList = new List<Room>();
        RoomList = new List<Room>();
        _selectedAdditionalService = new List<AdditionalService>();
        await OnSubmit.InvokeAsync(ReservationViewModel);
    }

    private void ParseAdditionalServices()
    {
        var additionalServiceReservations = new HashSet<AdditionalServiceReservation>();
        foreach (var additionalService in _selectedAdditionalService)
        {
            additionalServiceReservations.Add(new AdditionalServiceReservation
            {
                AdditionalService = additionalService,
                Reservation = ReservationModel
            });
        }

        ReservationModel.AdditionalServiceReservations = additionalServiceReservations;
    }

    private void ParseSelectedRooms()
    {
        SelectedRoomList.ForEach(x => ReservationModel.RoomReservations.Add(new RoomReservation
        {
            Reservation = ReservationModel,
            Room = x
        }));
    }

    private void FillAvailableRoomsList(ReservationSpan reservationSpan)
    {
        RoomList = roomService.GetAvailableRooms(reservationSpan);
    }

    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
    }

    private void SetClient(Client client)
    {
        ReservationViewModel.Client = client;
    }

    private async Task DisableClientAdd(Client client)
    {
        client.IsActive = true;
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
        ReservationViewModel.Client = client;
        EnableClientAdd = false;
    }

    private DateTime GetMinimalDepartureDate()
    {
        return ReservationModel.DateFrom != default ? ReservationModel.DateFrom : DateTime.Now.ToLocalTime().AddDays(-1);
    }

    private void CalculatePrice()
    {
        _price = 0d;
        if (SelectedRoomList != null && SelectedRoomList.Count > 0)
        {
            _price += SelectedRoomList.Sum(room => room.Price);
        }

        if (_selectedAdditionalService != null && _selectedAdditionalService.Count > 0)
        {
            _price += _selectedAdditionalService.Sum(x => x.Price);
        }
    }
}