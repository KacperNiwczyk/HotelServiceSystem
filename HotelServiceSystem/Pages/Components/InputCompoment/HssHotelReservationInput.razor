@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using System.Globalization
@using HotelServiceSystem.Core.Validations
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.ViewModel
@inject IHotelReservationService hotelReservationService
@inject IClientService clientService
@inject IRoomService roomService
@inject IRoomHelper _roomHelper
@inject IAdditionalServiceService additionalServiceService
@inject IAdditionalServiceHelper additionalServiceHelper
@inject IServiceProvider _serviceProvider;

<EditForm Model="@ReservationViewModel" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <HssClientAutoselect ClientModel="@ReservationViewModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
    <br/>
    <HssInputCustom Caption="Number of guests" @bind-Value="ReservationViewModel.NumberOfGuests" ValidationFor="@(() => ReservationViewModel.NumberOfGuests)"/>
    <HssTimespanPicker ReservationModel="@ReservationViewModel" OnDatesSelected="@FillAvailableRoomsList"/>
    <br/>
    <div class="form-group">
        <HSSRoomMultiSelector @bind-NotSelected="@RoomList" NotSelectedLabel="Available Rooms" @bind-Selected="@ReservationViewModel.SelectedRooms" SelectedLabel="Selected Rooms" OnRoomsChanged="@CalculatePrice"/>
    </div>
    <ValidationMessage For="@(() => ReservationViewModel.SelectedRooms)"/>
    <HssAdditionalServiceSelect AdditionalServiceList="@_additionalServiceList" @bind-SelectedAdditionalServices="@ReservationViewModel.SelectedAdditionalServices"/>
    <HssInputCustom Caption="Price" @bind-Value="@Price" ReadOnly="@true"/>
    <HssInputCustom Caption="Discount" @bind-Value="ReservationViewModel.Discount"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success" Class="form-control col-2 btn btn-primary">Submit</MudButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public HotelReservation ReservationModel { get; set; }
    
    [Parameter]
    public bool IsUpdate { get; set; }
    
    [Parameter]
    public HotelReservationViewModel ReservationViewModel { get; set; }
    
    [Parameter]
    public EventCallback<HotelReservationViewModel> OnSubmit { get; set; }
    
    private bool EnableClientAdd { get; set; }
    private List<Room> RoomList { get; set; }
    private List<Room> SelectedRoomList { get; set; }
    private List<Client> ClientList { get; set; }
    private List<AdditionalService> _additionalServiceList = new List<AdditionalService>();
    private int NumberOfDays { get; set; }
    private double _price;

    private string Price
    {
        get
        {
            CalculatePrice();
            return _price.ToString(CultureInfo.InvariantCulture);
        }
        set
        {
            CalculatePrice();
            _price = double.Parse(value);
        } 
    }

    private Client SelectedClient
    {
        get => ReservationViewModel.Client ?? (ReservationViewModel.Client = Client.Default);
        set => ReservationViewModel.Client = value;
    }

    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        SelectedRoomList = new List<Room>();
        ClientList = clientService.GetAllClients();
        _additionalServiceList = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Reservation);
        
        var arrival = ReservationViewModel.DateFrom;
        var departure = ReservationViewModel.DateTo;
        
        if (arrival != default && departure != default)
        {
            await FillAvailableRoomsList(new ReservationSpan(arrival, departure));
        }
        
        GetPreselectedRooms(ReservationViewModel.SelectedRooms);
        await base.OnInitializedAsync();
    }

    private void GetPreselectedRooms(ICollection<Room> selectedRooms)
    {
        if (selectedRooms == null || selectedRooms.Count <= 0)
        {
            return;
        }
            
        foreach (var room in selectedRooms)
        {
            if (room != null)
            {
                SelectedRoomList.Add(room);
            }
        }

        RoomList.RemoveAll(x => SelectedRoomList.Any(y => y.Equals(x)));
    }
    
    private async Task Submit()
    {;
        ReservationViewModel.Price = _price;
        
        if (!IsUpdate)
        {
            SelectedRoomList = new List<Room>();
            RoomList = new List<Room>();
        }
        
        await OnSubmit.InvokeAsync(ReservationViewModel);
    }

    private async Task FillAvailableRoomsList(ReservationSpan reservationSpan)
    {
        RoomList = await roomService.GetAvailableRooms(reservationSpan);
        RoomList = RoomList.Where(x => _roomHelper.IsFree(x, reservationSpan)).ToList();
        NumberOfDays = reservationSpan.GetAmountOfDays();
    }

    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
    }

    private void SetClient(Client client)
    {
        ReservationViewModel.Client = client;
    }

    private async Task DisableClientAdd(Client client)
    {
        client.IsActive = true;
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
        ReservationViewModel.Client = client;
        EnableClientAdd = false;
    }

    private DateTime GetMinimalDepartureDate()
    {
        return ReservationModel.DateFrom != default ? ReservationModel.DateFrom : DateTime.Now.ToLocalTime().AddDays(-1);
    }

    private void CalculatePrice()
    {
        _price = 0d;

        var selectedRooms = ReservationViewModel.SelectedRooms;
        if (selectedRooms != null && selectedRooms.Count > 0)
        {
            _price += selectedRooms.Sum(room => room.Price);
        }

        var selectedAdditionalService = ReservationViewModel.SelectedAdditionalServices;
        if (selectedAdditionalService != null && selectedAdditionalService.Count > 0)
        {
            _price += selectedAdditionalService.Sum(x => x.Price);
        }

        _price *= NumberOfDays;
    }
}