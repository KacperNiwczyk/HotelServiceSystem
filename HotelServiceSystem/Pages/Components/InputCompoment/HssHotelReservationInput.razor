@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using System.Globalization
@using HotelServiceSystem.Interfaces.Helpers
@using TimeSpan = HotelServiceSystem.Core.HssTimeSpan
@inject IHotelReservationService hotelReservationService
@inject IClientService clientService
@inject IRoomService roomService
@inject IAdditionalServiceService additionalServiceService
@inject IAdditionalServiceHelper additionalServiceHelper

<EditForm Model="@ReservationModel" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <HssClientAutoselect ClientModel="@ReservationModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
    <br/>
    <HssInputCustom Caption="Number of guests" @bind-Value="ReservationModel.NumberOfGuests"/>
    <HssTimespanPicker ReservationModel="@ReservationModel" OnDatesSelected="@FillAvailableRoomsList"/>
    <br/>
    <div class="form-group">
        <HSSRoomMultiSelector NotSelected="@RoomList" NotSelectedLabel="Available Rooms" Selected="@SelectedRoomList" SelectedLabel="Selected Rooms" OnRoomsChanged="@(() => CalculatePrice())"/>
    </div>
    <ValidationMessage For="@(() => ReservationModel.RoomReservations)"></ValidationMessage>
    <HssAdditionalServiceSelect AdditionalServiceList="@_additionalServiceList" @bind-SelectedAdditionalServices="@_selectedAdditionalService"/>
    <HssInputCustom Caption="Price" @bind-Value="@Price" ReadOnly="@true"/>
    <HssInputCustom Caption="Discount" @bind-Value="ReservationModel.Discount"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-2 btn btn-primary" value="Submit"/>
    </div>
</EditForm>

@code {
    [Parameter]
    public HotelReservation ReservationModel { get; set; }
    
    [Parameter]
    public EventCallback<HotelReservation> OnSubmit { get; set; }
    
    private bool EnableClientAdd { get; set; }
    private List<Room> RoomList { get; set; }
    private List<Room> SelectedRoomList { get; set; }
    private List<Client> ClientList { get; set; }
    private List<AdditionalService> _additionalServiceList = new List<AdditionalService>();
    private List<AdditionalService> _selectedAdditionalService = new List<AdditionalService>();
    private string _price = string.Empty;
    
    private string Price
    {
        get => CalculatePrice().ToString(CultureInfo.InvariantCulture);
        set => _price = value;
    }

    private Client SelectedClient
    {
        get => ReservationModel.Client ?? (ReservationModel.Client = new Client
        {
            CompanyName = "",
            Email = "",
            FirstName = "",
            LastName = "",
            PhoneNumber = ""
        });
        set => ReservationModel.Client = value;
    }

    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        SelectedRoomList = new List<Room>();
        ClientList = clientService.GetAllClients();
        _additionalServiceList = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Reservation);
        
        var roomReservations = ReservationModel.RoomReservations;
        if (roomReservations != null && roomReservations.Count > 0)
        {
            foreach (var roomReservation in roomReservations)
            {
                var room = roomReservation.Room;
                if (room != null)
                {
                    SelectedRoomList.Add(room);
                }
                
            }
            RoomList.RemoveAll(x => SelectedRoomList.Any(y => y.Equals(x)));
        }
        
        if (ReservationModel?.AdditionalServiceReservations is {} additionalServiceReservations)
        {
            _selectedAdditionalService = additionalServiceReservations.Select(x => x.AdditionalService).ToList();
        }

        await base.OnInitializedAsync();
    }
    

    private async Task Submit()
    {
        ReservationModel.RoomReservations.Clear();
        SelectedRoomList.ForEach( x=> ReservationModel.RoomReservations.Add(new RoomReservation
        {
            Reservation = ReservationModel,
            Room = x
        }));
        ReservationModel.DateOfSubmission = DateTime.Today.ToLocalTime();
        
        var additionalServiceReservations = new HashSet<AdditionalServiceReservation>();
        
        foreach (var additionalService in _selectedAdditionalService)
        {
            additionalServiceReservations.Add(new AdditionalServiceReservation
            {
                AdditionalService = additionalService,
                Reservation = ReservationModel
            });
        }

        ReservationModel.AdditionalServiceReservations = additionalServiceReservations;
        ReservationModel.Price = CalculatePrice(); //TODO poprawić to gówno
        SelectedRoomList = new List<Room>();
        RoomList = new List<Room>();
        _selectedAdditionalService = new List<AdditionalService>();
        await OnSubmit.InvokeAsync(ReservationModel);
    }

    private void FillAvailableRoomsList(HssTimeSpan hssTimeSpan)
    {
        RoomList = roomService.GetAvailableRooms(hssTimeSpan);
    }

    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
    }

    private void SetClient(Client client)
    {
        ReservationModel.Client = client;
    }

    private async Task DisableClientAdd(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
        ReservationModel.Client = client;
        EnableClientAdd = false;
    }

    private DateTime GetMinimalDepartureDate()
    {
        return ReservationModel.DateFrom != default ? ReservationModel.DateFrom : DateTime.Now.ToLocalTime().AddDays(-1);
    }

    private double CalculatePrice()
    {
        var sum = 0d;
        if (SelectedRoomList != null && SelectedRoomList.Count > 0)
        {
            sum += SelectedRoomList.Sum(room => room.Price);
        }

        if (_selectedAdditionalService != null && _selectedAdditionalService.Count > 0)
        {
            sum += _selectedAdditionalService.Sum(x => x.Price);
        }

        return sum;
    }

}