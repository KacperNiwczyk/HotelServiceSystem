@using HotelServiceSystem.Core
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Pages.Default
@using System.Net

<EditForm Model="@ModelRoom" OnValidSubmit="@Submit">
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudTextField Label="Room identifier" @bind-Value="ModelRoom.RoomIdentifier" Variant="Variant.Filled" Margin="Margin.Dense"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudTextField Label="Floor" @bind-Value="ModelRoom.Floor" Variant="Variant.Filled" Margin="Margin.Dense"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudTextField Label="Price" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="ModelRoom.Floor" Variant="Variant.Filled" Margin="Margin.Dense"/>
        </MudItem>
        <MudItem xs="8" md="2">
            <MudFab Color="Color.Dark" Size="Size.Large" Label="@SingleBedLabel" Icon="@Icons.Material.Outlined.SingleBed" OnClick="@(() => AddBed(BedType.SingleBed))"/>
            <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Size="Size.Small" IconSize="Size.Medium" OnClick="@(() => RemoveBeds(BedType.SingleBed))"/>
        </MudItem>
        <MudItem xs="8" md="2">
            <MudFab Color="Color.Dark" Size="Size.Large" Label="@DoubleBedLabel" Icon="@Icons.Material.Outlined.KingBed" OnClick="@(() => AddBed(BedType.DoubleBed))"/>
            <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Size="Size.Small" IconSize="Size.Medium" OnClick="@(() => RemoveBeds(BedType.DoubleBed))"/>
        </MudItem>
        <MudItem xs="12">
            <HssAdditionalServiceSelect AdditionalServiceList="@AdditionalServiceList" @bind-SelectedAdditionalServices="@_selectedAdditionalServices"/>
        </MudItem>
    </MudGrid>
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-2 btn btn-primary" value="Submit"/>
    </div>
</EditForm>

@code {
    [Parameter]
    public Room ModelRoom { get; set; }
    
    [Parameter]
    public EventCallback<Room> OnSubmit { get; set; }
    
    [Parameter]
    public List<AdditionalService> AdditionalServiceList { get; set; }

    private string DoubleBedLabel => $"Double beds x{BedCount(BedType.DoubleBed)}";

    private string SingleBedLabel => $"Single beds x{BedCount(BedType.SingleBed)}";

    private List<AdditionalService> _selectedAdditionalServices = new List<AdditionalService>();

    protected override async Task OnInitializedAsync()
    {
        if (ModelRoom?.AdditionalServiceRooms is {} additionalServiceRooms)
        {
            _selectedAdditionalServices = additionalServiceRooms.Select(x => x.AdditionalService).ToList();
        }

        await base.OnInitializedAsync();
    }

    private void AddBed(BedType bedType)
    {
        ModelRoom.Beds.Add(new Bed { BedType = bedType });
    }

    private void RemoveBeds(BedType bedType)
    {
        var beds = ModelRoom.Beds;
        var bedToRemove = beds.FirstOrDefault(x => x.BedType == bedType);
        
        if (bedToRemove != null)
        {
            beds.Remove(bedToRemove);
        }
    }

    private int BedCount(BedType bedType)
    {
        return ModelRoom.Beds.Count(x => x.BedType == bedType);
    }

    private async Task Submit()
    {
        var additionalServiceRooms = new HashSet<AdditionalServiceRoom>();
        
        foreach (var additionalService in _selectedAdditionalServices)
        {
            additionalServiceRooms.Add(new AdditionalServiceRoom
            {
                AdditionalService = additionalService,
                Room = ModelRoom
            });
        }

        _selectedAdditionalServices = new List<AdditionalService>();
        ModelRoom.AdditionalServiceRooms = additionalServiceRooms;
        await OnSubmit.InvokeAsync(ModelRoom);
    }
}