@using HotelServiceSystem.Core
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Pages.Default
@using System.Net

@inject IAdditionalServiceService additionalServiceService
@inject IAdditionalServiceHelper additionalServiceHelper

<EditForm Model="@ModelRoom" OnValidSubmit="@Submit">
    <HssInputCustom Caption="Room identifier" @bind-Value="ModelRoom.RoomIdentifier"/>
    <HssInputCustom Caption="Floor" @bind-Value="ModelRoom.Floor"/>
    <HssInputCustom Caption="Price" @bind-Value="ModelRoom.Price"/>
    <div class="col-12 row">
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" Style="margin-right: 10px" Size="Size.Large" StartIcon="@Icons.Material.Outlined.SingleBed" OnClick="@(() => AddBed(BedType.SingleBed))">X @BedCount(BedType.SingleBed)</MudButton>
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Outlined.KingBed" OnClick="@(() => AddBed(BedType.DoubleBed))">X @BedCount(BedType.DoubleBed)</MudButton>
    </div>
    <br/>
    <HssAdditionalServiceSelect AdditionalServiceList="@AdditionalServiceList" @bind-SelectedChips="@_selectedAdditionalServices"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-2 btn btn-primary" value="Submit"/>
    </div>
</EditForm>

@code {
    [Parameter]
    public Room ModelRoom { get; set; }
    
    [Parameter]
    public EventCallback<Room> OnSubmit { get; set; }

    private MatChip[] _selectedAdditionalServices = null;

    protected override async Task OnInitializedAsync()
    {
        var selectedChips = new List<MatChip>();
        if (ModelRoom?.AdditionalServiceRooms is {} additionalServiceRooms)
        {
            selectedChips.AddRange(additionalServiceRooms.Select(addService => new MatChip() {Label = addService.AdditionalService.Name, IsCheckable = true, Attributes = new Dictionary<string, object> {{"Id", addService.AdditionalService.Id}}}));
        }

        _selectedAdditionalServices = selectedChips.ToArray();
        
        await base.OnInitializedAsync();
    }

    [Parameter]
    public List<AdditionalService> AdditionalServiceList { get; set; }

    private void AddBed(BedType bedType)
    {
        ModelRoom.Beds.Add(new Bed() {BedType = bedType});
    }

    private int BedCount(BedType bedType)
    {
        return ModelRoom.Beds.Count(x => x.BedType == bedType);
    }

    private async Task Submit()
    {
        var selectedServices = additionalServiceHelper.GetSelectedAdditionalServices(_selectedAdditionalServices, AdditionalServiceList);

        foreach (var additionalService in selectedServices.Where(additionalService => ModelRoom.AdditionalServiceRooms.All(y => y.AdditionalService.Name != additionalService.Name)))
        {
            ModelRoom.AdditionalServiceRooms.Add(new AdditionalServiceRoom
            {
                AdditionalService = additionalService,
                Room = ModelRoom
            });
        }

        await OnSubmit.InvokeAsync(ModelRoom);
    }
}