@using HotelServiceSystem.Core
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Pages.Default
@using System.Net
@using HotelServiceSystem.Core.Validations
@using FluentValidation
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<EditForm Model="@ModelRoom" OnValidSubmit="Submit">
    <FluentValidationValidator/>
    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="12" sm="6">
            <MudTextField Label="Room identifier" @bind-Value="ModelRoom.RoomIdentifier" Variant="Variant.Filled" Margin="Margin.Dense"/>
            <ValidationMessage For="@(() => ModelRoom.RoomIdentifier)"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField Label="Price" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="ModelRoom.Price" Variant="Variant.Filled" Margin="Margin.Dense"/>
            <ValidationMessage For="@(() => ModelRoom.Price)"/>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudFab Color="Color.Inherit" Size="Size.Large" Label="@SingleBedLabel" Icon="@Icons.Material.Outlined.SingleBed" OnClick="@(() => AddBed(BedType.SingleBed))"/>
            <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Size="Size.Small" IconSize="Size.Medium" OnClick="@(() => RemoveBeds(BedType.SingleBed))"/>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudFab Color="Color.Inherit" Size="Size.Large" Label="@DoubleBedLabel" Icon="@Icons.Material.Outlined.KingBed" OnClick="@(() => AddBed(BedType.DoubleBed))"/>
            <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Size="Size.Small" IconSize="Size.Medium" OnClick="@(() => RemoveBeds(BedType.DoubleBed))"/>
            <ValidationMessage For="@(() => ModelRoom.Beds)"/>
        </MudItem>
        <MudItem xs="12" md="2">
            <MudTextField Label="Floor" @bind-Value="ModelRoom.Floor" Variant="Variant.Filled" Margin="Margin.Dense"/>
            <ValidationMessage For="@(() => ModelRoom.Floor)"/>
        </MudItem>
        <MudItem xs="12">
            <HssAdditionalServiceSelect AdditionalServiceList="@AdditionalServiceList" @bind-SelectedAdditionalServices="@_selectedAdditionalServices"/>
        </MudItem>
        @if (HasReset)
        {
            <MudItem xs="6" sm="1">
                <MudButton EndIcon="@Icons.Material.Rounded.Replay" Color="Color.Warning" Variant="Variant.Filled" OnClick="ResetValues" Size="Size.Large" ButtonType="ButtonType.Reset">Reset</MudButton>
            </MudItem>
        }
        <MudItem xs="6" sm="1">
            <MudButton EndIcon="@Icons.Material.Rounded.Check" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Submit">Submit</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Room ModelRoom { get; set; }
    
    [Parameter]
    public EventCallback<Room> OnSubmit { get; set; }
    
    [Parameter]
    public List<AdditionalService> AdditionalServiceList { get; set; }

    [Parameter]
    public bool HasReset { get; set; } = true;

    private string DoubleBedLabel => $"Double beds x{BedCount(BedType.DoubleBed)}";

    private string SingleBedLabel => $"Single beds x{BedCount(BedType.SingleBed)}";

    private List<AdditionalService> _selectedAdditionalServices = new List<AdditionalService>();
    
    private RoomValidator _validator = new RoomValidator();

    protected override async Task OnInitializedAsync()
    {
        if (ModelRoom?.AdditionalServiceRooms is {} additionalServiceRooms)
        {
            _selectedAdditionalServices = additionalServiceRooms.Select(x => x.AdditionalService).ToList();
        }

        await base.OnInitializedAsync();
    }

    private void AddBed(BedType bedType)
    {
        ModelRoom.Beds.Add(new Bed { BedType = bedType });
    }

    private void RemoveBeds(BedType bedType)
    {
        var beds = ModelRoom.Beds;
        var bedToRemove = beds.FirstOrDefault(x => x.BedType == bedType);
        
        if (bedToRemove != null)
        {
            beds.Remove(bedToRemove);
        }
    }

    private int BedCount(BedType bedType)
    {
        return ModelRoom.Beds.Count(x => x.BedType == bedType);
    }

    private async Task Submit()
    {
        var additionalServiceRooms = new HashSet<AdditionalServiceRoom>();
        
        foreach (var additionalService in _selectedAdditionalServices)
        {
            additionalServiceRooms.Add(new AdditionalServiceRoom
            {
                AdditionalService = additionalService,
                Room = ModelRoom
            });
        }

        _selectedAdditionalServices = new List<AdditionalService>();
        ModelRoom.AdditionalServiceRooms = additionalServiceRooms;
        var message = $"New room {ModelRoom.RoomIdentifier} was successfully added";
        await OnSubmit.InvokeAsync(ModelRoom);
       
        Snackbar.Add(message, Severity.Success);
    }

    private void ResetValues()
    {
        ModelRoom.Beds.Clear();
    }
}