@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@inject IEventReservationService eventReservationService
@inject IClientService clientService
@inject IRoomService roomService

<EditForm Model="@EventReservationModel" OnValidSubmit="@Submit">
    <FluentValidationValidator/>
    <HssClientAutoselect ClientList="@ClientList" ClientModel="@EventReservationModel.Client" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
    <HssInputCustom Caption="Number of guests" @bind-Value="EventReservationModel.NumberOfGuests"/>
    
    @* Dodać kontrolkę czy to wydarzenie jedno, czy dwu dniowe*@
    <div class="col-12 row">
        <label class="col-3">Date From</label>
        <MatDatePicker class="form-control col-3" @bind-Value="EventReservationModel.DateFrom"/>
    </div>
    <div class="col-12 row">
        <label class="col-3">Date to</label>
        <MatDatePicker class="form-control col-3" @bind-Value="EventReservationModel.DateTo"/>
        <ValidationMessage For="@(() => EventReservationModel.DateTo)"></ValidationMessage>
    </div>
    
    @*Dodać kontrolkę czy to jest  *@
    <div class="form-group">
        <HSSMultiSelector Selected="@_selected" NotSelected="@_notSelected"/>
    </div>
    
    @*EventRoom*@

    <HssInputCustom Caption="Price" @bind-Value="EventReservationModel.Price"/>
    <HssInputCustom Caption="Discount" @bind-Value="EventReservationModel.Discount"/>
    <MatStringField Label="Description" @bind-Value="EventReservationModel.Description" FullWidth="true"/>
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-2 btn btn-primary" value="Submit"/>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventReservation EventReservationModel { get; set; }
    
    private List<MultiSelector> _selected = new List<MultiSelector>();
    private List<MultiSelector> _notSelected = new List<MultiSelector>();
    private List<Room> _selectedRooms = new List<Room>();
    private List<Room> RoomList { get; set; }
    private List<Client> ClientList { get; set; }

    [Parameter]
    public EventCallback<EventReservation> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoomList = roomService.GetAllRoomsAsync();
        ClientList = clientService.GetAllClients();
        
        EventReservationModel = new EventReservation
        {
            Client = new Client()
        };
        
        _notSelected = RoomList.Select(x => new MultiSelector(x.Id.ToString(), $"Room Number : {x.RoomIdentifier}")).ToList();
        await base.OnInitializedAsync();
    }
    

    private async Task Submit()
    {
        _selectedRooms = RoomList.Where(x => _selected.Any(y => y.Key == x.Id.ToString())).ToList();

        _selectedRooms.ForEach( x=> EventReservationModel.RoomReservations.Add(new RoomReservation
        {
            Reservation = EventReservationModel,
            Room = x
        }));

        await eventReservationService.AddEventAsync(EventReservationModel);
        await OnSubmit.InvokeAsync(EventReservationModel);
        EventReservationModel = new EventReservation
        {
            Client = new Client()
        };
    }
    
    private async Task AddClient(Client client)
    {
        await clientService.AddClientAsync(client);
        ClientList.Add(client);
    }
    
    private void SetClient(Client client)
    {
        EventReservationModel.Client = client;
    }
}