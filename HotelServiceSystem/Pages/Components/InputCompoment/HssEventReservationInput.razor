@using HotelServiceSystem.Entities
@using HotelServiceSystem.Features
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Core
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.ViewModel
@using System.Globalization

@inject IEventReservationService eventEventService
@inject IClientService clientService
@inject IRoomService roomService
@inject IRoomHelper _roomHelper
@inject ISnackbar Snackbar

<EditForm Model="@EventViewModel" OnValidSubmit="@Submit">
    <FluentValidationValidator/>
     <MudGrid>
            <MudItem xs="12">
                <HssClientAutoselect ClientModel="@EventViewModel.Client" ClientList="@ClientList" OnClientAdd="@AddClient" ClientValueChanged="@SetClient"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Liczba gości" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Person" @bind-Value="@EventViewModel.NumberOfGuests"/>
                <ValidationMessage For="@(() => EventViewModel.NumberOfGuests)"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <HssTimespanPicker ReservationModel="EventViewModel" OnDatesSelected="FillAvailableRoomsList"/>
            </MudItem>
            <MudItem xl="12">
                <HSSRoomMultiSelector @bind-NotSelected="@RoomList" NotSelectedLabel="Dostępne pokoje" @bind-Selected="@EventViewModel.SelectedRooms" SelectedLabel="Wybrane pokoje" OnRoomsChanged="@CalculatePrice"/>
                <ValidationMessage For="@(() => EventViewModel.SelectedRooms)"/>
            </MudItem>
         <MudItem xs="12">
                 <MudTextField Label="Zniżka" @bind-Value="@EventViewModel.Discount"/>
            </MudItem>
         <MudItem xs="12">
             <MudTextField Label="Cena" ReadOnly="@true" @bind-Value="@Price" Adornment="Adornment.End" AdornmentText="PLN"/>
         </MudItem>
         <MudItem xs="12">
             <MudTextField T="string" Label="Opis" Variant="Variant.Text" @bind-Value="@EventViewModel.Description" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Description"/>
         </MudItem>
            @if (!IsUpdate)
            {
                <MudItem xs="6" sm="1">
                    <MudButton EndIcon="@Icons.Material.Rounded.Replay" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Reset">Resetuj</MudButton>
                </MudItem>
            }
            <MudItem xs="6" sm="1">
                <MudButton EndIcon="@Icons.Material.Rounded.Check" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Submit">Wyślij</MudButton>
            </MudItem>
        </MudGrid>
</EditForm>

@code {
    [Parameter]
    public EventReservationViewModel EventViewModel { get; set; }

    private List<Room> RoomList { get; set; }

    [Parameter]
    public bool IsUpdate { get; set; }
    
    private List<Client> ClientList { get; set; }
    
    private static DateTime _today = DateTime.Today;
    
    private double _price;
    private int DaysCount { get; set; } = 1;
    
    private string Price
    {
        get
        {
            CalculatePrice();
            return _price.ToString(CultureInfo.InvariantCulture);
        }
        set
        {
            CalculatePrice();
            _price = double.Parse(value);
        } 
    }

    [Parameter]
    public EventCallback<EventReservationViewModel> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoomList = new List<Room>();
        ClientList = clientService.GetAllClients();

        if (EventViewModel.DateRange != null)
        {
            var arrival = EventViewModel.DateRange.Start;
            var departure = EventViewModel.DateRange.End;
        
            if (arrival != default && departure != default)
            {
                await FillAvailableRoomsList(new ReservationSpan(arrival.Value, departure.Value));
            }  
        }
        else
        {
            EventViewModel.DateRange = new DateRange(_today.Date, _today.Date.AddDays(2));
        }

        GetPreselectedRooms(EventViewModel.SelectedRooms);
        await base.OnInitializedAsync();
    }
    
    private void GetPreselectedRooms(ICollection<Room> selectedRooms)
    {
        if (selectedRooms == null || selectedRooms.Count <= 0)
        {
            return;
        }

        RoomList.RemoveAll(x => selectedRooms.Any(y => y.Equals(x)));
    }


    private async Task Submit()
    {
        EventViewModel.DateOfSubmission = DateTime.Today.ToLocalTime();
        EventViewModel.Price = _price;

        if (IsUpdate)
        {
            RoomList = new List<Room>();
            Snackbar.Add($"Rezerwacja numer '{EventViewModel.Id}' została zaaktualizowana", Severity.Warning);
        }
        else
        {
            Snackbar.Add($"Nowa rezerwacja została dodana", Severity.Success);
        }
        
        await OnSubmit.InvokeAsync(EventViewModel);
    }
    
    private async Task FillAvailableRoomsList(ReservationSpan reservationSpan)
    {
        RoomList = await roomService.GetAvailableRooms(reservationSpan);
        RoomList = RoomList.Where(x => _roomHelper.IsFree(x, reservationSpan)).ToList();
        DaysCount = reservationSpan.GetAmountOfDays();
    }

    private async Task AddClient(Client client)
    {
        Snackbar.Add($"Nowy klient {client.FirstName} {client.LastName} został dodany", Severity.Success);
        await clientService.AddClientAsync(client);
    }
    
    private void SetClient(Client client)
    {
        EventViewModel.Client = client;
    }
    
    private void CalculatePrice()
    {
        _price = 0d;

        var selectedRooms = EventViewModel.SelectedRooms;
        if (selectedRooms != null && selectedRooms.Count > 0)
        {
            _price += selectedRooms.Sum(room => room.Price);
        }

        var selectedAdditionalService = EventViewModel.SelectedAdditionalServices;
        if (selectedAdditionalService != null && selectedAdditionalService.Count > 0)
        {
            _price += selectedAdditionalService.Sum(x => x.Price);
        }

        _price *= DaysCount;
    }
}