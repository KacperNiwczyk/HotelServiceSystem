@using HotelServiceSystem.Domain.Entities
@inject ISnackbar Snackbar

<EditForm Model="@ClientModel" OnValidSubmit="@Submit">
    <FluentValidationValidator/>
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudTextField Label="Imię*" @bind-Value="@ClientModel.FirstName" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.FirstName)"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudTextField Label="Nazwisko*" @bind-Value="@ClientModel.LastName" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.LastName)"/>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudHidden Breakpoint="Breakpoint.Xs"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudTextField Label="Numer telefonu*" @bind-Value="@ClientModel.PhoneNumber" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.PhoneNumber)"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudTextField Label="Email*" @bind-Value="@ClientModel.Email" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.Email)"/>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudHidden Breakpoint="Breakpoint.Xs"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudTextField Label="Firma" @bind-Value="@ClientModel.CompanyName" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.CompanyName)"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudTextField Label="NIP" @bind-Value="@ClientModel.TaxId" Variant="Variant.Filled"/>
            <ValidationMessage For="@(() => ClientModel.TaxId)"/>
        </MudItem>
        <MudItem xs="12">
            <MudHidden Breakpoint="Breakpoint.Xs"/>
        </MudItem>
         @if (!IsEdit)
         {
             <MudItem xs="6" sm="1">
                 <MudButton EndIcon="@Icons.Material.Rounded.Replay" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Reset">Resetuj</MudButton>
             </MudItem>
         }
         <MudItem xs="6" sm="1">
             <MudButton EndIcon="@Icons.Material.Rounded.Check" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Submit">Wyślij</MudButton>
         </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Client ClientModel { get; set; }
    
    [Parameter]
    public EventCallback<Client> OnSubmit { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }
    
    private async Task Submit()
    {
        if (IsEdit)
        {
            Snackbar.Add($"Klient '{ClientModel.FirstName} {ClientModel.LastName}' został zaaktualizowany", Severity.Warning);
        }
        else
        {
            Snackbar.Add($"Nowy klient '{ClientModel.FirstName} {ClientModel.LastName}' został dodany", Severity.Success);
        }
        
        await OnSubmit.InvokeAsync(ClientModel);
    }
}