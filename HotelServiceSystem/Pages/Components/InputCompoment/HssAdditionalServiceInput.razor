@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core
@inject ISnackbar Snackbar

<EditForm Model="@AdditionalServiceModel" OnValidSubmit="@Submit">
    <FluentValidationValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Label="Name" Variant="Variant.Filled" @bind-Value="@AdditionalServiceModel.Name"/>
            <ValidationMessage For="@(() => AdditionalServiceModel.Name)"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField Label="Price" Variant="Variant.Filled" @bind-Value="@AdditionalServiceModel.Price"/>
            <ValidationMessage For="@(() => AdditionalServiceModel.Price)"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect @bind-Value="@AdditionalServiceModel.ServiceType" Label="Select additional service type" Variant="Variant.Filled">
                @foreach (var item in AvailableServiceTypes)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            <ValidationMessage For="@(() => AdditionalServiceModel.ServiceType)"/>
        </MudItem>
        <MudItem xs="12">
            <MudHidden Breakpoint="Breakpoint.Xs"/>
        </MudItem>
         @if (!IsEdit)
         {
             <MudItem xs="6" sm="1">
                 <MudButton EndIcon="@Icons.Material.Rounded.Replay" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Reset">Reset</MudButton>
             </MudItem>
         }
         <MudItem xs="6" sm="1">
             <MudButton EndIcon="@Icons.Material.Rounded.Check" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" ButtonType="ButtonType.Submit">Submit</MudButton>
         </MudItem>
    </MudGrid>
</EditForm>

@code {
    
    [Parameter]
    public List<ServiceType> AvailableServiceTypes { get; set; }
    
    private ServiceType EnumValue { get; set; }
    
    private ServiceType SelectedType { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }
    
    [Parameter]
    public AdditionalService AdditionalServiceModel { get; set; }
    
    [Parameter]
    public EventCallback<AdditionalService> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AdditionalServiceModel = new AdditionalService();
        await base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        if (IsEdit)
        {
            Snackbar.Add($"Additional service '{AdditionalServiceModel.Name}' was successfully edited", Severity.Warning);
        }
        else
        {
            Snackbar.Add($"New additional service '{AdditionalServiceModel.Name}' was successfully added", Severity.Success);
        }
        
        await OnSubmit.InvokeAsync(AdditionalServiceModel);
    }
}