@using System.Threading
@using HotelServiceSystem.Data_access.Core
@using HotelServiceSystem.Domain.Entities

<div class="multi-select">
    <ul>
        <li style="list-style-type: none">@NotSelectedLabel</li>
        <ul class="selectable-ul" style="margin-right: 30px">
            @foreach (var item in NotSelected)
            {
                <li @onclick="@(() => Select(item))">
                    <div style="justify-content: space-between">
                        <MudText>Numer: @item.RoomIdentifier</MudText>
                        <MudText Class="flex-d">
                           Łóżka: <MudIcon Class="hss-table-icon" Icon="@Icons.Material.Rounded.SingleBed" Size="Size.Small"/>x @item.Beds.Count(SingleBeds)
                               <MudIcon Class="hss-table-icon" Icon="@Icons.Material.Rounded.KingBed" Size="Size.Small"/>x @item.Beds.Count(DoubleBeds)
                        </MudText>
                        <MudText>Piętro: @item.Floor</MudText>
                        <MudText>Cena: @item.Price</MudText>
                    </div>
                </li>
            }
        </ul>
    </ul>
    <ul>
        <li style="list-style-type: none">@SelectedLabel</li>
        <ul class="selectable-ul">
            @foreach (var item in Selected)
            {
                <li @onclick="@(() => Deselect(item))">
                    <div style="justify-content: space-between">
                        <MudText>Numer: @item.RoomIdentifier</MudText>
                        <MudText Class="flex-d">
                           Łóżka: <MudIcon Class="hss-table-icon" Icon="@Icons.Material.Rounded.SingleBed" Size="Size.Small"/>x @item.Beds.Count(SingleBeds)
                               <MudIcon Class="hss-table-icon" Icon="@Icons.Material.Rounded.KingBed" Size="Size.Small"/>x @item.Beds.Count(DoubleBeds)
                        </MudText>
                        <MudText>Piętro: @item.Floor</MudText>
                        <MudText>Cena: @item.Price</MudText>
                    </div>
                </li>
            }
        </ul>
    </ul>
</div>



@code {
    [Parameter]
    public List<Room> NotSelected
    {
        get => _notSelected;
        set
        {
            if (_notSelected == value)
                return;
            
            NotSelectedChanged.InvokeAsync(value);
            _notSelected = value;
        } 
    }

    private bool SingleBeds(Bed bed) => bed.BedType == BedType.SingleBed;
    private bool DoubleBeds(Bed bed) => bed.BedType == BedType.DoubleBed;
    
    private List<Room> _notSelected = new List<Room>();
    
    [Parameter]
    public EventCallback<List<Room>> NotSelectedChanged { get; set; }

    [Parameter]
    public string NotSelectedLabel { get; set; }
    
    [Parameter]
    public List<Room> Selected
    {
        get => _selected;
        set
        {
            if (_selected == value)
                return;
            SelectedChanged.InvokeAsync(value);
            _selected = value;
        } 
    } 
    
    private List<Room> _selected = new List<Room>();
    
    [Parameter]
    public EventCallback<List<Room>> SelectedChanged { get; set; }
    
    [Parameter]
    public string SelectedLabel { get; set; }
    
    [Parameter]
    public EventCallback<object> OnRoomsChanged { get; set; }

    private void Select(Room room)
    {
        NotSelected.Remove(room);
        Selected.Add(room);
        OnRoomsChanged.InvokeAsync(new object());
    }

    private void Deselect(Room room)
    {
        Selected.Remove(room);
        NotSelected.Add(room);
        OnRoomsChanged.InvokeAsync(new object());
    }

    private string GetRoomTextValue(Room room)
    {
        return room == null ? string.Empty : $"Number: {room.RoomIdentifier} Single beds: {room.Beds.Count(x => x.BedType == BedType.SingleBed)} Double beds: {room.Beds.Count(x => x.BedType == BedType.DoubleBed)} Floor: {room.Floor} Price: {room.Price}";
    }
}