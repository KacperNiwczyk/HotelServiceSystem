@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core
@using System.Linq.Expressions
@using HotelServiceSystem.Interfaces.Helpers

@inject IAdditionalServiceHelper serviceHelper;

<div class="card">
    <div class="card-body" style="display: flex">
        <MudChipSet MultiSelection="@true" UseOrdinaryCheck="@true" Filter="@true" @bind-SelectedChips="@SelectedChips">
            @if (AdditionalServiceList != null)
            {
                foreach (var additionalService in AdditionalServiceList)
                {
                    <MudChip Text="@additionalService.Name" UserAttributes="@(new Dictionary<string, object> {{IdAttribute, additionalService.Id}})"/>
                }
            }
        </MudChipSet>
    </div>
</div>


@code {
        
    private const string IdAttribute = "Id";

    [Parameter]
    public List<AdditionalService> AdditionalServiceList { get; set; } = new List<AdditionalService>();
    
    [Parameter]
    public EventCallback<List<AdditionalService>> SelectedAdditionalServicesChanged { get; set; }
    
    private List<AdditionalService> _selectedAdditionalServices  = new List<AdditionalService>();

    private MudChip[] SelectedChips
    {
        get => _selectedChips;
        set
        {
            SelectedAdditionalServices = ParseChips(value);
            _selectedChips = value;
        }
    }
    
    [Parameter]
    public List<AdditionalService> SelectedAdditionalServices
    {
        get => _selectedAdditionalServices;
        set
        {
            if (_selectedAdditionalServices == value)
                return;
            
            SelectedAdditionalServicesChanged.InvokeAsync(value);
            _selectedAdditionalServices = value;
        }
    }
    
    private List<AdditionalService> ParseChips(IEnumerable<MudChip> newChips)
    {
        return newChips.Select(chip => AdditionalServiceList.FirstOrDefault(x => x.Name.Equals(chip.Text, StringComparison.OrdinalIgnoreCase))).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        if (SelectedAdditionalServices != null && SelectedAdditionalServices.Count > 0)
        {
            var selectedChips = new List<MudChip>();
            selectedChips.AddRange(SelectedAdditionalServices.Select(addService => new MudChip {Text = addService.Name}));
            SelectedChips = selectedChips.ToArray();
        }

        await base.OnInitializedAsync();
    }

    private MudChip[] _selectedChips = null;
}