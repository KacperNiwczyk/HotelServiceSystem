@page "/eventReservationDetails/{Id:int}"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Interfaces.Helpers
@using HotelServiceSystem.ViewModel
@using HotelServiceSystem.Core
@using HotelServiceSystem.Core.Helpers
@inject IEventReservationService eventReservationService
@inject NavigationManager navigationManager
@inject IReservationHelper ReservationHelper
@inject IDateManager DateManager

@if (EventReservationModel != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="25">
                <MudExpansionPanel IsExpanded="@PanelExpanded" HideIcon="@true">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Rounded.Edit" class="mr3"/>
                            <MudText> Edit reservation</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <HssEventReservationInput EventViewModel="EventReservationModel" IsUpdate="@true" OnSubmit="OnReservationUpdate"/>
                    </ChildContent>
                </MudExpansionPanel>
            </MudCard>
        </MudItem>
        <MudItem xs="8">
                        <MudCard Elevation="25">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudGrid Justify="Justify.SpaceEvenly">
                                        <MudItem xs="12" sm="4">
                                            <MudText Align="Align.Center" Typo="Typo.h6" Inline="@true" GutterBottom="@true">Reservation <strong><u>@EventReservationModel.Id</u></strong> Details</MudText>
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            <MudHidden Breakpoint="Breakpoint.Xs"/>
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            @if (IsActive)
                                            {
                                                <MudText Typo="Typo.h6" Color="Color.Secondary"> Active </MudText>
                                            }
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudDivider DividerType="DividerType.Middle"/>
                                        </MudItem>
                                    </MudGrid>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Client" Variant="Variant.Outlined">@GetClientValue(EventReservationModel.Client)</MudField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Date of submission" Variant="Variant.Outlined">@EventReservationModel.DateOfSubmission.ToString(Constants.DefaultDateTimeFormat)</MudField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Arrival" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.FlightLand">@EventReservationModel.DateRange.Start.Value.ToString(Constants.DefaultDateFormat)</MudField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Departure" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.DirectionsRun">@EventReservationModel.DateRange.End.Value.ToString(Constants.DefaultDateFormat)</MudField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Price" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.AttachMoney">@EventReservationModel.Price</MudField>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudField Label="Discount" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.LocalOffer">% @EventReservationModel.Discount</MudField>
                                    </MudItem>
                                     <MudItem xs="12">
                                         <MudField Label="Description">@EventReservationModel.Description</MudField>
                                     </MudItem>
                                    <MudItem xs="12">
                                        <MudField Variant="Variant.Outlined" Label="Additional services">
                                            @foreach (var addService in EventReservationModel.SelectedAdditionalServices)
                                            {
                                                <MudChip Text="@addService.Name"/>
                                            }
                                        </MudField>
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudField Label="Selected rooms" Variant="Variant.Outlined">
                                            <ul class="selectable-ul" style="border: none; width:inherit">
                                                @foreach (var item in _reservedRooms)
                                                {
                                                    <li @onclick="@(() => Select(item.Id))">
                                                        <div style="justify-content: space-between">
                                                            <MudGrid Spacing="0">
                                                                <MudItem xs="12" sm="6">
                                                                    <MudText>Number @item.RoomIdentifier</MudText>
                                                                </MudItem>
                                                                <MudItem xs="12" sm="6">
                                                                    <MudText>Floor: @item.Floor</MudText>
                                                                </MudItem>
                                                                <MudItem xs="12" sm="6">
                                                                    <MudText>Price @item.Price</MudText>
                                                                </MudItem>
                                                            </MudGrid>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </MudField>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <p>waiting</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    private EventReservationViewModel EventReservationModel { get; set; }
    private EventReservation EventReference { get; set; }
    private List<Room> _reservedRooms = new List<Room>();
    private bool IsActive { get; set; }
    private List<AdditionalService> _selectedAdditionalServices = new List<AdditionalService>();
    
    private bool PanelExpanded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EventReference = eventReservationService.GetById(Id);
        EventReservationModel = EventReservationViewModel.FromEventReservation(EventReference);
        IsActive = EventReservationModel.DateRange.Start <= DateManager.Today && !EventReservationModel.HasFinished;
        _reservedRooms = EventReservationModel.SelectedRooms;
        _selectedAdditionalServices = EventReservationModel.SelectedAdditionalServices;
        await base.OnInitializedAsync();
    }

    private async Task OnReservationUpdate(EventReservationViewModel eventReservation)
    {
        EventReference.UpdateFrom(eventReservation);
        await eventReservationService.UpdateEventAsync(EventReference);
        navigationManager.NavigateTo("/reservations");
    }
    
    private void Select(int id)
    {
        navigationManager.NavigateTo($"roomDetails/{id}");
    }
    
    private string GetClientValue(Client client) => ReservationHelper.GetClientFirstNameLastName(client);
}