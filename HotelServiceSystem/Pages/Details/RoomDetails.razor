@page "/roomDetails/{Id:int}"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core.Helpers
@using HotelServiceSystem.Core

@inject IRoomService roomService;
@inject IAdditionalServiceService additionalServiceService

@if (ModelRoom != null)
{
    <MudExpansionPanel HideIcon="@true" IsExpanded="PanelExpanded">
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Rounded.Edit" class="mr3"/>
                <MudText> Edit room</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <HssRoomInput ModelRoom="@ModelRoom" AdditionalServiceList="@AdditionalServices" OnSubmit="@SaveRoom"/>
        </ChildContent>
    </MudExpansionPanel>
    <div class="card">
        <div class="card-body">
            <p>Room identifier : @ModelRoom.RoomIdentifier</p>
            <p>Floor : @ModelRoom.Floor</p>
            <p>Price : @ModelRoom.Price</p>
            <p>Single beds : @ModelRoom.CountBeds(BedType.SingleBed)</p>
            <p>Double beds : @ModelRoom.CountBeds(BedType.DoubleBed)</p>
            <p>Status : <HssRoomStatus RoomModel="ModelRoom"/></p>
            <p>Additional Services</p>
            @foreach (var addService in ModelRoom.AdditionalServiceRooms)
            {
                <MatChip Label="@addService.AdditionalService.Name" IsCheckable="@false"/>
            }
            <p>Reservations</p>
            @if (_futureReservations.Any())
            {
                foreach (var reservation in _futureReservations)
                {
                    <MatListItem>@reservation.DateFrom.Date @reservation.DateTo.Date</MatListItem>
                    <MatDivider Padded="@true"/>
                }
            }
            else
            {
                <p>This room has no future resevations</p>
            }
        </div>
    </div>
}
else
{
    <p>waiting...</p>
}


@code {
    [Parameter]
    public int Id { get; set; }
    
    private Room ModelRoom { get; set; }
    
    private bool PanelExpanded { get; set; }

    private List<AdditionalService> AdditionalServices { get; set; }
    
    private IEnumerable<Reservation> _futureReservations = new List<Reservation>();

    protected override async Task OnInitializedAsync()
    {
        AdditionalServices = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Room);
        ModelRoom = await roomService.GetRoomById(Id);
        
        if (ModelRoom.RoomReservations is {} roomReservations)
        {
            _futureReservations = roomReservations.Where(x => x.Reservation.DateFrom > DateTime.Today.ToLocalTime()).Select(x => x.Reservation);
        }
        
        await base.OnInitializedAsync();
    }
    
    private async Task SaveRoom(Room room)
    {
        await roomService.UpdateRoomAsync(ModelRoom);
        PanelExpanded = false;
    }
}