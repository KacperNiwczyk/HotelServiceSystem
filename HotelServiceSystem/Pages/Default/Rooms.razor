@page "/rooms"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core
@using HotelServiceSystem.Interfaces.Helpers

@inject IRoomService roomService
@inject NavigationManager navigationManager
@inject IRoomHelper roomHelper
@inject IAdditionalServiceService additionalServiceService

<div class="col-12">
    <hr/>
    <MudExpansionPanel HideIcon="@true">
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Rounded.Add" class="mr3"/>
                <MudText>Add new room</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <HssRoomInput ModelRoom="@SetNewRoom()" AdditionalServiceList="@AdditionalServices" OnSubmit="@OnRoomAdded"/>
        </ChildContent>
    </MudExpansionPanel>
    <br/>
    <div class="col-10">
        <h3>Rooms</h3>
        <table class="table">
            <thead>
            <tr>
                <th>Room number</th>
                <th>Single beds</th>
                <th>Double beds</th>
                <th>Floor</th>
                <th>Price</th>
                <th>Room status</th>
            </tr>
            </thead>
            <tbody>
            @if (RoomList != null)
            {
                foreach (var room in RoomList)
                {
                    <tr>
                        <td>@room.RoomIdentifier</td>
                        <td>@BedCount(room, BedType.SingleBed)</td>
                        <td>@BedCount(room, BedType.DoubleBed)</td>
                        <td>@room.Floor</td>
                        <td>@room.Price</td>
                        <td><HssRoomStatus RoomModel="@room"/></td>
                        <td><MatButton Type="Button" OnClick="@(() => ShowDetails(room.Id))">Details</MatButton></td>
                    </tr>
                }
            }
            else
            {
                <h3>..Loading</h3>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Room> RoomList { get; set; }
    
    private List<AdditionalService> AdditionalServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AdditionalServices = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Room);
        RoomList = roomService.GetAllRoomsAsync();
        await base.OnInitializedAsync();
    }

    private async Task OnRoomAdded(Room room)
    {
        await roomService.AddRoomAsync(room);
        RoomList.Add(room);
    }

    private int BedCount(Room room, BedType bedType)
    {
        return room.Beds.Count(x => x.BedType == bedType);
    }

    private void ShowDetails(int id)
    {
        navigationManager.NavigateTo($"roomDetails/{id}");
    }
    
    private Room SetNewRoom()
    {
        return new Room()
        {
            IsFreeNow = true,
            IsOutOfService = false,
            ShouldBeCleaned = false
        };
    }
}