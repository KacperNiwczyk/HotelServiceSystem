@page "/rooms"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core
@using HotelServiceSystem.Interfaces.Helpers
@inject IRoomService roomService
@inject IRoomHelper roomHelper
@inject IAdditionalServiceService additionalServiceService

<MudGrid>
    <MudItem xs="12">
        <MudCard Elevation="25">
            <MudExpansionPanel HideIcon="@true">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Rounded.Add" class="mr3"/>
                        <MudText>Add new room</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <HssRoomInput ModelRoom="@SetNewRoom()" AdditionalServiceList="@AdditionalServices" OnSubmit="@OnRoomAdded"/>
                </ChildContent>
            </MudExpansionPanel>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <HssRoomTable RoomList="@RoomList" Dense="@false"/>
    </MudItem>
</MudGrid>

@code {
    private List<Room> RoomList { get; set; }
    
    private List<AdditionalService> AdditionalServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AdditionalServices = additionalServiceService.GetAllAdditionalServices(x => x.ServiceType == ServiceType.Room);
        RoomList = roomService.GetAllRoomsAsync();
        await base.OnInitializedAsync();
    }

    private async Task OnRoomAdded(Room room)
    {
        await roomService.AddRoomAsync(room);
        RoomList.Add(room);
    }

    private Room SetNewRoom()
    {
        return new Room()
        {
            IsFreeNow = true,
            IsOutOfService = false,
            ShouldBeCleaned = false
        };
    }
}