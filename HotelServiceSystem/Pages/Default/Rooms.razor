@page "/rooms"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core
@inject IRoomService roomService
@inject NavigationManager navigationManager
<h3>Rooms</h3>
<div class="col-12">
    <hr/>
     <MatAccordion> 
         <MatExpansionPanel> 
             <MatExpansionPanelSummary> 
                 <MatExpansionPanelHeader>Add room</MatExpansionPanelHeader> 
             </MatExpansionPanelSummary> 
             <MatExpansionPanelDetails> 
                 <HssRoomInput ModelRoom="@SetNewRoom()" OnSubmit="@OnRoomAdded"/>
             </MatExpansionPanelDetails> 
         </MatExpansionPanel>
     </MatAccordion>
    <br/>
    <div class="col-10">
        <h3>Rooms</h3>
        <table class="table">
            <thead>
            <tr>
                <th>Room number</th>
                <th>Single beds</th>
                <th>Double beds</th>
                <th>Floor</th>
                <th>Price</th>
                <th>Is free?</th>
                <th>Is out of service?</th>
                <th>Need cleaning?</th>
            </tr>
            </thead>
            <tbody>
            @if (RoomList != null)
            {
                foreach (var room in RoomList)
                {
                    <tr>
                        <td>@room.RoomIdentifier</td>
                        <td>@BedCount(room, BedType.SingleBed)</td>
                        <td>@BedCount(room, BedType.DoubleBed)</td>
                        <td>@room.Floor</td>
                        <td>@room.Price</td>
                        <td>@room.IsFree</td>
                        <td>@room.IsOutOfService</td>
                        <td>@room.ShouldBeCleaned</td>
                        <td><MatButton Type="Button" OnClick="@(() => EditRoom(room.Id))">Edit</MatButton></td>
                    </tr>
                }
            }
            else
            {
                <h3>..Loading</h3>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Room> RoomList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoomList = roomService.GetAllRoomsWithRelations(x => x.Beds);
        await base.OnInitializedAsync();
    }

    private async Task OnRoomAdded(Room room)
    {
        await roomService.AddRoomAsync(room);
        RoomList.Add(room);
    }

    private int BedCount(Room room, BedType bedType)
    {
        return room.Beds.Count(x => x.BedType == bedType);
    }

    private void EditRoom(int id)
    {
        navigationManager.NavigateTo($"RoomDetails/{id}");
    }
    
    private Room SetNewRoom()
    {
        return new Room()
        {
            IsFree = true,
            IsOutOfService = false,
            ShouldBeCleaned = false
        };
    }

}