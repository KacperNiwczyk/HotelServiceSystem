@page "/dashboard"
@using HotelServiceSystem.Interfaces.Services
@using HotelServiceSystem.Entities
@using HotelServiceSystem.Core.Helpers
@inject IRoomService RoomService
@inject IHotelReservationService HotelReservationService;
@inject IEventReservationService EventReservationService;

<MudGrid>
    <MudItem xs="12" sm="6">
        <HssRoomsToCleanTable RoomList="@_shouldBeCleaned" OnRoomCleaned="@CleanRoom"/>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Statystyki pokoi</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChart ChartType="ChartType.Pie" ChartOptions="@_chartOptions" InputData="@roomsData" InputLabels="@roomsLabels" Width="25%" Height="25%"/>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Szacowany przychód w przeciagu @_selectedOption dni zaczynając od @dateFrom.ToString(Constants.DefaultDateFormat) - @totalIncome PLN </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudChart ChartType="ChartType.Bar" XAxisLabels="@xAxisLables" Height="100%" Width="100%" ChartOptions="_reservationChartOptions" ChartSeries="_chartSeriesList"></MudChart>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudGrid>
                    <MudItem xs="5">
                        <MudDatePicker Label="Wybierz datę" @bind-Value="@dateFrom" MinDate="DateTime.Today.ToLocalTime()" DateChanged="ChangeDate"/>
                    </MudItem>
                    <MudItem xs="5">
                        <MudSelect Label="Ilość dni" @bind-Value="@selectedDayOption">
                            @foreach (var option in daysOptions)
                            {
                                <MudSelectItem Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTextField T="int" Label="Ustaw przedział" @bind-value="@NearTicks"/>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Szacowany przychód roczny</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChart ChartType="ChartType.Bar" XAxisLabels="@yearlyXAxisLabels" ChartSeries="@_yearlyChartSeriesList" Height="100%" Width="100%" ChartOptions="@_yearlyChartOptions"/>
            </MudCardContent>
            <MudCardActions>
                <MudGrid>
                    <MudItem xs="2">
                        <MudTextField T="int" Label="Ustaw przedział" @bind-Value="@YearlyTicks"/>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code{
    private List<Room> _rooms = new List<Room>();
    private List<Room> _shouldBeCleaned = new List<Room>();
    private List<HotelReservation> _reservations = new List<HotelReservation>();
    private List<EventReservation> _eventReservations = new List<EventReservation>();
    private string[] xAxisLables;
    private double[] roomsData;
    private double[] reservationPriceData;
    private string[] roomsLabels;
    private List<ChartSeries> _chartSeriesList;
    private List<ChartSeries> _yearlyChartSeriesList = new List<ChartSeries>();
    private ChartOptions _chartOptions = new ChartOptions();
    private ChartOptions _reservationChartOptions = new ChartOptions();
    private ChartOptions _yearlyChartOptions = new ChartOptions();
    private int _nearTicks;

    private int NearTicks
    {
        get => _nearTicks;
        set
        {
            _nearTicks = value;
            UpdateNearChartTicks();
        }
    }

    private int _yearlyTicks;
    private int YearlyTicks
    {
        get => _yearlyTicks;
        set
        {
            _yearlyTicks = value;
            UpdateYearlyChartTicks();
        }
    }

    private void UpdateYearlyChartTicks()
    {
        _yearlyChartOptions.YAxisTicks = _yearlyTicks;
    }

    private DateTime dateFrom;
    private double totalIncome;
    private int[] daysOptions = {7, 14};
    private string[] yearlyXAxisLabels = new[] {"Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"};

    private int selectedDayOption
    {
        get => _selectedOption;
        set
        {
            _selectedOption = value;
            InitializeNearReservationData();
        } 
    }
    private int _selectedOption = 7;

    private string greenColor = "#5bc06c";
    private string redColor = "#ec521c";
    private string darkRedColor = "#d00707";
    private string yellowColor = "#ebeb39";

    protected override async Task OnInitializedAsync()
    {
        dateFrom = DateTime.Today.ToLocalTime();
        _reservationChartOptions.YAxisTicks = 250;
        _yearlyChartOptions.YAxisTicks = 250;
        _reservations = HotelReservationService.GetAllHotelReservations();
        _eventReservations = EventReservationService.GetAllEvents();
        InitializeYearlyData();
        InitializeRoomData();
        InitializeNearReservationData();
        await base.OnInitializedAsync();
    }

    private void InitializeYearlyData()
    {
        var months = Enumerable.Range(1, 12);
        var hotelReservationsMonthlyCosts = new double[12];
        var eventReservationsMonthlyCosts = new double[12];

        bool MonthIs(Reservation reservation, int monthNumber) => reservation.DateFrom.Month == monthNumber;
        foreach (var monthNumber in months)
        {
            hotelReservationsMonthlyCosts[monthNumber - 1] = _reservations.Where(x => MonthIs(x, monthNumber) && x.Price > 0).Sum(x => x.Price);
            eventReservationsMonthlyCosts[monthNumber - 1] = _eventReservations.Where(x => MonthIs(x, monthNumber) && x.Price >0).Sum(x => x.Price);
        }

        _yearlyChartSeriesList.Add(new ChartSeries() {Name = "Rezerwacje hotelowe", Data = hotelReservationsMonthlyCosts});
        _yearlyChartSeriesList.Add(new ChartSeries() {Name = "Rezerwacje wydarzeń", Data = eventReservationsMonthlyCosts});
    }

    private void ChangeDate(DateTime? dateTime)
    {
        dateFrom = dateTime.Value;
        InitializeNearReservationData();
    }

    private void InitializeNearReservationData()
    {
        _chartSeriesList = new List<ChartSeries>();
        bool GetReservationInTimespan(Reservation reservation) => !reservation.HasFinished && reservation.DateFrom >= dateFrom && reservation.DateFrom <= dateFrom.AddDays(_selectedOption) && reservation.Price > 0;
        var futureHotelReservations = _reservations.Where(GetReservationInTimespan).ToList();
        var futureEventReservations = _eventReservations.Where(GetReservationInTimespan).ToList();
        
        totalIncome = futureHotelReservations.Sum(x => x.Price) + futureEventReservations.Sum(x => x.Price);

        var dates = GetDaysList();
        xAxisLables = dates.Select(x => x.ToString(Constants.DayMonth)).ToArray();
        
        var hotelReservationsChartData = GetChartData(dates, futureHotelReservations);
        var eventReservationChartData = GetChartData(dates, futureEventReservations);
        
        var hotelSeries = new ChartSeries { Name = "Rezerwacje hotelowe", Data = hotelReservationsChartData.Values.ToArray()};
        var eventSeries = new ChartSeries { Name = "Rezerwacje wydarzeń", Data = eventReservationChartData.Values.ToArray()};
        
        _chartSeriesList.Add(hotelSeries);
        _chartSeriesList.Add(eventSeries);
    }

    private List<DateTime> GetDaysList()
    {
        var dates = new List<DateTime> {dateFrom};
        for (var i = 1; i < _selectedOption; i++)
        {
            dates.Add(dateFrom.AddDays(i));
        }
        return dates;
    }

    private Dictionary<DateTime, double> GetChartData<T>(List<DateTime> dates, List<T> reservations) where T: Reservation
    {
        var dictionary = new Dictionary<DateTime, double>();

        foreach (var date in dates)
        {
            dictionary.Add(date, 0);
        }

        foreach (var reservation in reservations)
        {
            var reservationDate = reservation.DateFrom;
            if (dictionary.ContainsKey(reservationDate))
            {
                dictionary[reservationDate] += reservation.Price;
            }
        }
        
        return dictionary;
    }

    private void InitializeRoomData()
    {
        _chartOptions.ChartPalette = new[] {greenColor, redColor, darkRedColor, yellowColor};
        _rooms = RoomService.GetAllRoomsAsync();
        _shouldBeCleaned = _rooms.Where(x => x.ShouldBeCleaned).Take(5).ToList();

        var availableCount = (double) _rooms.Where(x => x.IsFreeNow).Count();
        var occupiedCount = (double) _rooms.Where(x => !x.IsFreeNow).Count();
        var outOfServiceCount = (double) _rooms.Where(x => x.IsOutOfService).Count();
        var cleanedCount = (double) _rooms.Where(x => x.ShouldBeCleaned).Count();

        roomsData = new[] {availableCount, occupiedCount, outOfServiceCount, cleanedCount};
        roomsLabels = new[]
        {
            $"Dostępne ({availableCount})", $"Zajętę ({occupiedCount})", $"Niedostępne ({outOfServiceCount})",
            $"Do sprzątątania ({cleanedCount})"
        };
    }
    
    private async Task CleanRoom(Room room)
    {
        room.ShouldBeCleaned = false;
        await RoomService.UpdateRoomAsync(room);
        _shouldBeCleaned = _rooms.Where(x => x.ShouldBeCleaned).Take(5).ToList();
    }
    
    private void UpdateNearChartTicks()
    {
        _reservationChartOptions.YAxisTicks = _nearTicks;
    }
}